{
  "source_file_path_relative_to_docusaurus_root": "blog/2021-08-26-visualizing-your-data-graph-using-entviz.md",
  "source_file_content_hash": "0cd0bf66e3f6e37397b6f9bc7669d2a22c5977fb58fd631ab585ed165eda609e",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Visualizing your Data Graph Using entviz\nauthor: Amit Shani\nauthorURL: \"https://github.com/hedwigz\"\nauthorImageURL: \"https://avatars.githubusercontent.com/u/8277210?v=4\"\nauthorTwitter: itsamitush\n---",
      "source_content_hash": "0ef79cdead7814ebe46a5b0457d44b4f681925b161220ac7d761199ce0872560",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "53eaf0e1",
      "source_content": "Joining an existing project with a large codebase can be a daunting task.",
      "source_content_hash": "7d6653b5a8a704af462031aff1c641eb55d8e974f7712d263206f639c9c295b3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "加入一个已有大型代码库的项目可能令人望而生畏。"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "Understanding the data model of an application is key for developers to start working on an existing project. One  commonly used tool to help overcome this challenge, and enable developers to grasp an application's data model is an [ER (Entity Relation) diagram](https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model).",
      "source_content_hash": "931dba9ea9c3dbe85d3d954c0a342352a7dff2efed30551f5535fb262b7db05c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "理解应用程序的数据模型是开发者接手现有项目的关键。常用的辅助工具是[ER图（实体关系图）](https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model)，它能帮助开发者快速掌握应用的数据结构。"
      }
    },
    {
      "segment_id": "180bddb1",
      "source_content": "ER diagrams provide a visual representation of your data model, and details each field of the entities. Many tools can help create these, where one example is Jetbrains DataGrip, that can generate an ER diagram by connecting to and inspecting an existing database:",
      "source_content_hash": "36486050cc25de73b607f01e2cd62ec28f5084348b6aa3b951328b4d5926e1eb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "ER图以可视化形式展现数据模型，并详细标注每个实体的字段。Jetbrains DataGrip等工具可通过连接现有数据库自动生成ER图："
      }
    },
    {
      "segment_id": "4b7cc23c",
      "source_content": "<div style={{textAlign: 'center'}}>\n  <img alt=\"Datagrip ER diagram\" src=\"https://entgo.io/images/assets/entviz/datagrip_er_diagram.png\" />\n  <p style={{fontSize: 12}}>DataGrip ER diagram example</p>\n</div>",
      "source_content_hash": "09f7abbcbb922609df6bcd9c8afb32e5780a0295284589b73d69cb4fbb295502",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_4b7cc23c"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "[Ent](https://entgo.io/docs/getting-started/), a simple, yet powerful entity framework for Go, was originally developed inside Facebook specifically for dealing with projects with large and complex data models.\nThis is why Ent uses code generation - it gives type-safety and code-completion out-of-the-box which helps explain the data model and improves developer velocity.\nOn top of all of this, wouldn't it be great to automatically generate ER diagrams that maintain a high-level view of the data model in a visually appealing representation? (I mean, who doesn't love visualizations?)",
      "source_content_hash": "02f58ed5317e9c075f5b69d507fb0e2aeb2a15e0ed5c3eeb338f4fc6f7b2d489",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "[Ent](https://entgo.io/docs/getting-started/)是Facebook内部开发的Go语言实体框架，专为处理大型复杂数据模型而设计。通过代码生成提供开箱即用的类型安全和代码补全，既便于理解数据结构又能提升开发效率。如果还能自动生成直观美观的ER图来维护数据模型的宏观视图，岂不更妙？（毕竟谁不喜欢可视化呢？）"
      }
    },
    {
      "segment_id": "95b38f97",
      "source_content": "### Introducing entviz",
      "source_content_hash": "12b9ff77d3ca3b2f17c1ec4e3b72f69d2169877506d54110560088362205f25a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 介绍entviz"
      }
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "[entviz](https://github.com/hedwigz/entviz) is an ent extension that automatically generates a static HTML page that visualizes your data graph.",
      "source_content_hash": "6c8fc347b45393afdbdb3fe28b375a7f78b4e3448717b2fdc3ef49a8de7d5a42",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "[entviz](https://github.com/hedwigz/entviz)是Ent的扩展组件，可自动生成静态HTML页面来可视化数据图谱。"
      }
    },
    {
      "segment_id": "358a309f",
      "source_content": "<div style={{textAlign: 'center'}}>\n  <img width=\"600px\" alt=\"Entviz example output\" src=\"https://entgo.io/images/assets/entviz/entviz-example-visualization.png\" />\n  <p style={{fontSize: 12}}>Entviz example output</p>\n</div>",
      "source_content_hash": "760a443d2d2ff63b0dc56d14124af103f3770670494dc5baa08b6013cd580005",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_358a309f"
      }
    },
    {
      "segment_id": "dfe931a2",
      "source_content": "Most ER diagram generation tools need to connect to your database and introspect it, which makes it harder to maintain an up-to-date diagram of the database schema. Since entviz integrates directly to your Ent schema, it does not need to connect to your database, and it automatically generates fresh visualization every time you modify your schema.",
      "source_content_hash": "024f60c0a45573232f1642a8fe7747209f521de9b5fc4f86d6232835ee885e4a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "传统ER图工具需连接数据库进行逆向工程，难以保持图表实时性。entviz直接集成Ent schema，无需连接数据库，每次修改schema时都会自动生成最新可视化。"
      }
    },
    {
      "segment_id": "4daf5cdd",
      "source_content": "If you want to know more about how entviz was implemented, checkout the [implementation section](#implementation).",
      "source_content_hash": "33028f94ae1a4fb30152ded37a141ff5396caca255cb97c5db844ee964a1061f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如需了解实现细节，请查看[实现章节](#implementation)。"
      }
    },
    {
      "segment_id": "109ace10",
      "source_content": "### See it in action",
      "source_content_hash": "0aea97eb60ad53e8a7d2537fd687cf567491da2104914fefd12bb4d893e0336b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 实际演示"
      }
    },
    {
      "segment_id": "97ae4a01",
      "source_content": "First, let's add the entviz extension to our entc.go file:",
      "source_content_hash": "ea461923d1f4f06d7b3093d76f4c15a727f894f17d9a63d6ac67a05f2433adeb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "首先在entc.go文件中添加entviz扩展："
      }
    },
    {
      "segment_id": "4dd51304",
      "source_content": "```bash\ngo get github.com/hedwigz/entviz\n```",
      "source_content_hash": "6c4d156f2a1ed3ea38df763fe6ac903e8939cf342dfea52745c36f9b9e7d4267",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_4dd51304"
      }
    },
    {
      "segment_id": "688f7369",
      "source_content": ":::info\nIf you are not familiar with `entc` you're welcome to read [entc documentation](https://entgo.io/docs/code-gen#use-entc-as-a-package) to learn more about it.\n:::",
      "source_content_hash": "c7bc4fb31361990cb1a7ace3dbd46f0c2a244573fdbcf25e1547533b96db65c9",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::info\n若对`entc`不熟悉，建议阅读[entc文档](https://entgo.io/docs/code-gen#use-entc-as-a-package)了解详情。\n:::"
      }
    },
    {
      "segment_id": "45022e4f",
      "source_content": "```go title=\"ent/entc.go\"\nimport (\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"github.com/hedwigz/entviz\"\n)\n\nfunc main() {\n\terr := entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(entviz.Extension{}))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```",
      "source_content_hash": "66c8a3237d76bcbd5a541956f71a37c8077c7e3e41fe48a9b703381c7dd5bdfa",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_45022e4f"
      }
    },
    {
      "segment_id": "40158b4b",
      "source_content": "Let's say we have a simple schema with a user entity and some fields:",
      "source_content_hash": "41cc3634257e3316d8a48fc132033c8d0c5d42dbfb7fdc993f34d6cc80bb66db",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "假设我们有个包含用户实体及若干字段的简单schema："
      }
    },
    {
      "segment_id": "c05ad55e",
      "source_content": "```go title=\"ent/schema/user.go\"\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t\tfield.String(\"email\"),\n\t\tfield.Time(\"created\").\n\t\t\tDefault(time.Now),\n\t}\n}\n```",
      "source_content_hash": "7b30e79acea95e7fc3deb63e13277596b7996bc69c948784112855fc84dbbc0e",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_c05ad55e"
      }
    },
    {
      "segment_id": "147e8550",
      "source_content": "Now, entviz will automatically generate a visualization of our graph everytime we run:",
      "source_content_hash": "f52df680c63da7948a8493bb25dbb7e7fed849d85abfa1734bee4b41d9dbbe47",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "现在每次运行以下命令时，entviz都会自动生成图谱可视化："
      }
    },
    {
      "segment_id": "bc137a19",
      "source_content": "```bash\ngo generate ./...\n```",
      "source_content_hash": "6db9cb3159d7d5724348dd0cde65e32843f037c31a8b73f31fd6de6d59e1177e",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_bc137a19"
      }
    },
    {
      "segment_id": "6cc549f2",
      "source_content": "You should now see a new file called `schema-viz.html` in your ent directory:",
      "source_content_hash": "d24f1a001c9ed5aabf518efa5d71c844f491b76c9c91b2bf6bf08d77d254332c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "此时ent目录下会出现`schema-viz.html`文件："
      }
    },
    {
      "segment_id": "c808e01e",
      "source_content": "```bash\n$ ll ./ent/schema-viz.html\n-rw-r--r-- 1 hedwigz hedwigz 7.3K Aug 27 09:00 schema-viz.html\n```",
      "source_content_hash": "4aedea6c2d163aa4b38a0fd641fad241117c56c6c2ba03fc4e1cfd6ecd6d9585",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_c808e01e"
      }
    },
    {
      "segment_id": "463ed165",
      "source_content": "Open the html file with your favorite browser to see the visualization",
      "source_content_hash": "9d1200f8546db09fcc1e2f341957e25957bc9c555cd5d9266368233dd4ed641b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "用浏览器打开该HTML文件即可查看可视化效果"
      }
    },
    {
      "segment_id": "a5c5772a",
      "source_content": "![tutorial image](https://entgo.io/images/assets/entviz/entviz-tutorial-1.png)",
      "source_content_hash": "e46bfb45704e7d5f6f458e5e84bded9c4cd8c338a03134fe2eeccd25c2dd835c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "![教程图示](https://entgo.io/images/assets/entviz/entviz-tutorial-1.png)"
      }
    },
    {
      "segment_id": "fbc2db85",
      "source_content": "Next, let's add another entity named Post, and see how our visualization changes:",
      "source_content_hash": "620470067a3fec6231755f4d6f3487bcb59c0e70919df3f61cc5ba3f7f1582cb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "现在我们添加Post实体观察可视化变化："
      }
    },
    {
      "segment_id": "8c3563d3",
      "source_content": "```bash\nent new Post\n```",
      "source_content_hash": "e6f2256e2a9f51f36a7a3818d1c22bc5f4c46e2da8563ef499777b4d2fdb9fcd",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_8c3563d3"
      }
    },
    {
      "segment_id": "f6563256",
      "source_content": "```go title=\"ent/schema/post.go\"\n// Fields of the Post.\nfunc (Post) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"content\"),\n\t\tfield.Time(\"created\").\n\t\t\tDefault(time.Now),\n\t}\n}\n```",
      "source_content_hash": "1f3675f33f3aa4a7e3a9f7a1c7fb0b7aae3320cf54cdf1564be647e709e4cf95",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_f6563256"
      }
    },
    {
      "segment_id": "2822251a",
      "source_content": "Now we add an ([O2M](https://entgo.io/docs/schema-edges/#o2m-two-types)) edge from User to Post:",
      "source_content_hash": "d302b3e24347e9f24fc863ea4fa760005efbf4c625fd2a7917ee5c4c7ffc5f98",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "接着添加从User到Post的[一对多边(O2M)](https://entgo.io/docs/schema-edges/#o2m-two-types)："
      }
    },
    {
      "segment_id": "dc73c0d2",
      "source_content": "```go title=\"ent/schema/post.go\"\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"posts\", Post.Type),\n\t}\n}\n```",
      "source_content_hash": "579701f11c987b80c973af6d198ece7fb174a9c3840658cc7a4ecdf3f3da9088",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_dc73c0d2"
      }
    },
    {
      "segment_id": "f0984c2a",
      "source_content": "Finally, regenerate the code:",
      "source_content_hash": "3211b71e270ffbbf2afd4a992266f7e7bbb88e6c507d10d3fd238da995a0e54d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "最后重新生成代码："
      }
    },
    {
      "segment_id": "c9873cf8",
      "source_content": "```bash\ngo generate ./...\n```",
      "source_content_hash": "6db9cb3159d7d5724348dd0cde65e32843f037c31a8b73f31fd6de6d59e1177e",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_c9873cf8"
      }
    },
    {
      "segment_id": "0801d969",
      "source_content": "Refresh your browser to see the updated result!",
      "source_content_hash": "7d88b2c51492edd73d4af1fc3b0bd52edac73a153298ce049e97c9a238a57c92",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "刷新浏览器即可查看更新后的效果！"
      }
    },
    {
      "segment_id": "3c19e221",
      "source_content": "![tutorial image 2](https://entgo.io/images/assets/entviz/entviz-tutorial-2.png)",
      "source_content_hash": "35030e506bdd8cdd0006e3fb35a00c128f0b7cf3c3a91fd0b99da0a5d09f8c2e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "![教程图示2](https://entgo.io/images/assets/entviz/entviz-tutorial-2.png)"
      }
    },
    {
      "segment_id": "48155948",
      "source_content": "### Implementation",
      "source_content_hash": "869d223f9a997bb69e40ed50d81213d4c552024f0338d9e31c4183f20d71e14f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 实现原理"
      }
    },
    {
      "segment_id": "44aaa880",
      "source_content": "Entviz was implemented by extending ent via its [extension API](https://github.com/ent/ent/blob/1304dc3d795b3ea2de7101c7ca745918def668ef/entc/entc.go#L197).\nThe Ent extension API lets you aggregate multiple [templates](https://entgo.io/docs/templates/), [hooks](https://entgo.io/docs/hooks/), [options](https://entgo.io/docs/code-gen/#code-generation-options) and [annotations](https://entgo.io/docs/templates/#annotations).\nFor instance, entviz uses templates to add another go file, `entviz.go`, which exposes the `ServeEntviz` method that can be used as an http handler, like so:",
      "source_content_hash": "a45e1a217700bca06e96399a4beecd4d783cafdef529372479d028a53a3fcc13",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Entviz 是通过扩展 Ent 的[扩展 API](https://github.com/ent/ent/blob/1304dc3d795b3ea2de7101c7ca745918def668ef/entc/entc.go#L197) 实现的。\nEnt 扩展 API 允许您聚合多个[模板](https://entgo.io/docs/templates/)、[钩子](https://entgo.io/docs/hooks/)、[选项](https://entgo.io/docs/code-gen/#code-generation-options)和[注解](https://entgo.io/docs/templates/#annotations)。\n例如，entviz 使用模板添加了另一个 Go 文件 `entviz.go`，该文件公开了 `ServeEntviz` 方法，可用作 HTTP 处理器，如下所示："
      }
    },
    {
      "segment_id": "1a63b635",
      "source_content": "```go\nfunc main() {\n\thttp.ListenAndServe(\"localhost:3002\", ent.ServeEntviz())\n}\n```",
      "source_content_hash": "e805e3a8476a27b66d64ab7bf998209350e19e436248db363ba77c3c64afa3e0",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_1a63b635"
      }
    },
    {
      "segment_id": "5f82a1e9",
      "source_content": "We define an extension struct which embeds the default extension, and we export our template via the `Templates` method:",
      "source_content_hash": "030b561f8542e26967d95ccdcd95f057733ec255e5276b0a44469a1bb54127b7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "我们定义了一个扩展结构体，它嵌入了默认扩展，并通过 `Templates` 方法导出我们的模板："
      }
    },
    {
      "segment_id": "4e583d18",
      "source_content": "```go\n//go:embed entviz.go.tmpl\nvar tmplfile string\n \ntype Extension struct {\n\tentc.DefaultExtension\n}\n \nfunc (Extension) Templates() []*gen.Template {\n\treturn []*gen.Template{\n\t\tgen.MustParse(gen.NewTemplate(\"entviz\").Parse(tmplfile)),\n\t}\n}\n```",
      "source_content_hash": "52cb84db96173f38dae7fb31d00a16041f7582d2d8bfc1a0994482f13d865974",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_4e583d18"
      }
    },
    {
      "segment_id": "bb1346b6",
      "source_content": "The template file is the code that we want to generate:",
      "source_content_hash": "04dca0d184082c3ec67ac9bd57f177e9e9788bd9e937717c2cc9815677936cfd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "模板文件是我们想要生成的代码："
      }
    },
    {
      "segment_id": "e908327f",
      "source_content": "```gotemplate\n{{ define \"entviz\"}}\n \n{{ $pkg := base $.Config.Package }}\n{{ template \"header\" $ }}\nimport (\n\t_ \"embed\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\n//go:embed schema-viz.html\nvar html string\n\nfunc ServeEntviz() http.Handler {\n\tgenerateTime := time.Now()\n\treturn http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {\n\t\thttp.ServeContent(w, req, \"schema-viz.html\", generateTime, strings.NewReader(html))\n\t})\n}\n{{ end }}\n```",
      "source_content_hash": "f462a7f3e8f4fd3087b5594e1ee41fb908e39def4677d410a97154ef4f74716d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_e908327f"
      }
    },
    {
      "segment_id": "2dbfc5f7",
      "source_content": "That's it! now we have a new method in ent package.",
      "source_content_hash": "1f5fde4b1053542fa13fad14b126524e9e763c0c8d1c7f7ed90b8992f087f1c7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "就这样！现在我们有了一个 ent 包中的新方法。"
      }
    },
    {
      "segment_id": "3f77c6a0",
      "source_content": "### Wrapping-Up",
      "source_content_hash": "e51c02e1e868db054ed8fe119116249bc70d84bac4b2d7c34db05bb4f6f38bb8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 总结"
      }
    },
    {
      "segment_id": "39f476dc",
      "source_content": "We saw how ER diagrams help developers keep track of their data model. Next, we introduced entviz - an Ent extension that automatically generates an ER diagram for Ent schemas. We saw how entviz utilizes Ent's extension API to extend the code generation and add extra functionality. Finally, you got to see it in action by installing and use entviz in your own project. If you like the code and/or want to contribute - feel free to checkout the [project on github](https://github.com/hedwigz/entviz).",
      "source_content_hash": "3d6ab15ecf0f54b00f8e07ff989d010f72ba39db971f365a592413455b90c62d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "我们了解了 ER 图如何帮助开发者跟踪数据模型。接着，我们介绍了 entviz —— 一个为 Ent 模式自动生成 ER 图的 Ent 扩展。我们看到了 entviz 如何利用 Ent 的扩展 API 来扩展代码生成并添加额外功能。最后，您通过安装并在自己的项目中使用 entviz 看到了它的实际效果。如果您喜欢这段代码或想要贡献 —— 欢迎查看 [GitHub 上的项目](https://github.com/hedwigz/entviz)。"
      }
    },
    {
      "segment_id": "827eb9a3",
      "source_content": "Have questions? Need help with getting started? Feel free to join our [Discord server](https://discord.gg/qZmPgTE6RX) or [Slack channel](https://entgo.io/docs/slack/).",
      "source_content_hash": "d0537932cd96ebc172f07d40432ff073381adb709b3fdc6d263a79438858fef3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "有问题吗？需要入门帮助吗？欢迎加入我们的 [Discord 服务器](https://discord.gg/qZmPgTE6RX) 或 [Slack 频道](https://entgo.io/docs/slack/)。"
      }
    },
    {
      "segment_id": "a1fdc22e",
      "source_content": ":::note[For more Ent news and updates:]\n\n- Subscribe to our [Newsletter](https://entgo.substack.com/)\n- Follow us on [Twitter](https://twitter.com/entgo_io)\n- Join us on #ent on the [Gophers Slack](https://entgo.io/docs/slack)\n- Join us on the [Ent Discord Server](https://discord.gg/qZmPgTE6RX)\n\n:::",
      "source_content_hash": "d4f11098ea703d24e53854ec8e2219390959641026efa07de5a588379be52b78",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note[获取更多 Ent 新闻和更新：]\n\n- 订阅我们的[新闻通讯](https://entgo.substack.com/)\n- 在 [Twitter](https://twitter.com/entgo_io) 上关注我们\n- 加入 [Gophers Slack](https://entgo.io/docs/slack) 上的 #ent 频道\n- 加入 [Ent Discord 服务器](https://discord.gg/qZmPgTE6RX)\n\n:::"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2021-08-26-visualizing-your-data-graph-using-entviz.md",
  "last_updated_timestamp": "2025-06-08T19:19:52.164111+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "0cd0bf66e3f6e37397b6f9bc7669d2a22c5977fb58fd631ab585ed165eda609e"
  }
}